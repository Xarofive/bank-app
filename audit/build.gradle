plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'checkstyle'
    id("com.github.spotbugs") version "6.1.11"
    id 'jacoco'
}

group = 'ru.katacademy.bank_app'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

checkstyle {
    toolVersion = '10.12.3'
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
}

jacoco {
    toolVersion = "0.8.11" // Версия JaCoCo
}


test {
    useJUnitPlatform {
    }

}

jacocoTestReport {
    dependsOn test
    reports {
        html.required = true // Локальный HTML-отчёт
    }


    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, includes: [
                    "ru/katacademy/bank_app/audit/domain/entity/*",
                    "ru/katacademy/bank_app/audit/application/service/*",
            ])
        }))
    }
}

// Проверка минимального покрытия
jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, includes: [
                    "ru/katacademy/bank_app/audit/domain/entity/*",
                    "ru/katacademy/bank_app/audit/application/service/*",
            ])
        }))
    }
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                minimum = 0.80 // Требуемое покрытие (80%)
            }
            println "Проверяемые классы/пакеты:"
            classDirectories.each { dir ->
                println " - ${dir}"
            }
        }
    }
}

import com.github.spotbugs.snom.Confidence
import com.github.spotbugs.snom.Effort

tasks.spotbugsMain {
    reports.create("html") {
        ignoreFailures = false
        effort = Effort.DEFAULT
        reportLevel = Confidence.LOW.LOW
        required = true
        outputLocation = file("$rootDir/build/reports/spotbugs/spotbugs.html")
        setStylesheet("fancy-hist.xsl")
    }
}

repositories {
    mavenCentral()
    maven { url = 'https://repo.spring.io/milestone' }
    maven { url = 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'com.github.spotbugs:spotbugs-annotations:4.8.3'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'


    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'com.h2database:h2'

}

tasks.named('test') {
	useJUnitPlatform()
}
