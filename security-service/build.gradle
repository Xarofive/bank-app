plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.0'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'checkstyle'
	id("com.github.spotbugs") version "6.1.11"
	id "jacoco"
}

group = 'ru.katacademy'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

checkstyle {
	toolVersion = '10.12.3'
	configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
}

tasks.spotbugsMain {
	reports.create("html") {
		required = true
		outputLocation = file("$rootDir/build/reports/spotbugs/spotbugs.html")
		setStylesheet("fancy-hist.xsl")
	}
}

repositories {
	mavenCentral()
	maven { url = 'https://repo.spring.io/milestone' }
	maven { url = 'https://repo.spring.io/snapshot' }
}

jacoco {
	toolVersion = "0.8.11"
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport // Генерировать отчёт после тестов
}

jacocoTestReport {
	dependsOn test
	reports {
		html.required = true // Локальный HTML-отчёт
	}


	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, includes: [
					"ru/katacademy/securityservice/util/*",
			])
		}))
	}
}

// Проверка минимального покрытия
jacocoTestCoverageVerification {
	dependsOn jacocoTestReport
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, includes: [
					"ru/katacademy/securityservice/util/*",

			])
		}))
	}
	violationRules {
		rule {element = 'CLASS'
			limit {
				minimum = 0.80 // Требуемое покрытие (80%)
			}
			println "Проверяемые классы/пакеты:"
			classDirectories.each { dir ->
				println " - ${dir}"
			}
		}
	}
}

dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-web'
//	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'javax.validation:validation-api:2.0.1.Final'
	implementation 'org.hibernate.validator:hibernate-validator:6.0.13.Final'
	implementation 'org.glassfish:javax.el:3.0.0'
//	implementation 'org.postgresql:postgresql:42.7.2'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
//	implementation 'junit:junit:4.13.1'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	implementation(project(":bank-shared"))

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Database
//	runtimeOnly 'org.postgresql:postgresql'

	// Testing
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation'com.h2database:h2'

	// Testcontainers для Kafka
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:kafka:1.19.3'
//	testImplementation 'org.testcontainers:postgresql'

}


bootJar {
    enabled = true
    archiveFileName = "security-service-${version}.jar"
}

jar {
    enabled = true
    archiveClassifier = 'plain'
}
