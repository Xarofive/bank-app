#version: '3.8'

services:
  otel-collector:
    image: otel/opentelemetry-collector:latest
    container_name: otel-collector
    ports:
      - "4318:4318"
      - "4317:4317"
    expose:
      - "4318"
      - "4317"
    volumes:
      - ./otel-config.yaml:/etc/otel-config.yaml
    command: ["--config=/etc/otel-config.yaml"]

  postgres:
    image: postgres:15
    container_name: bankapp-postgres
    restart: always
    ports:
      - "5434:5432"
    environment:
      POSTGRES_DB: userDB
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

  user-service_postgres:
    image: postgres:15
    container_name: user-service-postgres
    restart: always
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: mainDB
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - user-db-data:/var/lib/postgresql/data
      - ./main.sql:/docker-entrypoint-initdb.d/main.sql

  kyc-service_postgres:
    image: postgres:15
    container_name: kyc-service_postgres
    restart: always
    ports:
      - "5435:5432"
    environment:
      POSTGRES_DB: kyc_verifications
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_HOST_AUTH_METHOD: trust
#    volumes:
#      - user-db-data:/var/lib/postgresql/data
#      - ./main.sql:/docker-entrypoint-initdb.d/main.sql

  kafka:
    image: bitnami/kafka:3.6
    container_name: kafka
    ports:
      - "9092:9092" # для контейнеров
      - "9094:9094" # для доступа с хоста (IDE)
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,EXTERNAL://0.0.0.0:9094,CONTROLLER://0.0.0.0:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - kafka_data:/bitnami/kafka

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"  # API порт
      - "9001:9001"  # Консоль управления
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"



  bankapp:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bankapp
    depends_on:
      - postgres
      - kafka
      - otel-collector
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/userDB
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      OTEL_SERVICE_NAME: bankapp
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4318
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
    healthcheck:
      test: [ "CMD-SHELL", "wget --spider -q http://localhost:8080/actuator/health/liveness && wget --spider -q http://localhost:8080/actuator/health/readiness" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s


  fraud-detection:
    build:
      context: ./fraud-detection
      dockerfile: Dockerfile
    container_name: fraud-detection
    depends_on:
      - kafka
      - postgres
    ports:
      - "8081:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/userDB
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    healthcheck:
      test: [ "CMD-SHELL", "wget --spider -q http://localhost:8080/actuator/health/liveness && wget --spider -q http://localhost:8080/actuator/health/readiness" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s


  settings-service:
    build:
      context: ./settings-service
      dockerfile: Dockerfile
    container_name: settings-service
    depends_on:
      - kafka
      - postgres
    ports:
      - "8082:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/userDB
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_PROFILES_ACTIVE: docker
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "wget --spider -q http://localhost:8080/actuator/health/liveness && wget --spider -q http://localhost:8080/actuator/health/readiness" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s


  account-service:
    build:
      context: ./account-service
      dockerfile: Dockerfile
    container_name: account-service
    depends_on:
      - kafka
      - postgres
    ports:
      - "8084:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://user-service_postgres:5432/mainDB
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      OTEL_SERVICE_NAME: user-service
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4318
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
    healthcheck:
      test: [ "CMD-SHELL", "wget --spider -q http://localhost:8080/actuator/health/liveness && wget --spider -q http://localhost:8080/actuator/health/readiness" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s


  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    depends_on:
      - kafka
      - postgres
    ports:
      - "8087:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/notifications_db
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_PROFILES_ACTIVE: docker
      OTEL_SERVICE_NAME: notification-service
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4318
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
    healthcheck:
      test: [ "CMD-SHELL", "wget --spider -q http://localhost:8080/actuator/health/liveness && wget --spider -q http://localhost:8080/actuator/health/readiness" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s

  security-service:
    build:
      context: ./security-service
      dockerfile: Dockerfile
    container_name: security-service
    depends_on:
        - otel-collector
    ports:
        - "8085:8080"
    restart: always
    environment:
        OTEL_SERVICE_NAME: security-service
        OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4318
        OTEL_TRACES_EXPORTER: otlp
        OTEL_METRICS_EXPORTER: otlp
        OTEL_LOGS_EXPORTER: otlp
    healthcheck:
      test: [ "CMD-SHELL", "wget --spider -q http://localhost:8080/actuator/health/liveness && wget --spider -q http://localhost:8080/actuator/health/readiness" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s

  auth-statistics-service:
    build:
      context: ./auth-statistics-service
      dockerfile: Dockerfile
    container_name: auth-statistics-service
    depends_on:
      - kafka
      - user-service_postgres
    ports:
      - "8086:8080"
    restart: always
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://user-service_postgres:5432/mainDB
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_KAFKA_CONSUMER_GROUP_ID: auth-statistics-group
      SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET: earliest
      OTEL_SERVICE_NAME: auth-statistics-service
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4318
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
    healthcheck:
      test: [ "CMD-SHELL", "wget --spider -q http://localhost:8080/actuator/health/liveness && wget --spider -q http://localhost:8080/actuator/health/readiness" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s

  kyc-service:
    build:
      context: ./kyc-service
      dockerfile: Dockerfile
    container_name: kyc-service
    depends_on:
      - kyc-service_postgres
      - minio
    ports:
      - "8088:8080"
    restart: always
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://kyc-service_postgres:5432/kyc_verifications
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
      OTEL_SERVICE_NAME: kyc-service
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4318
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp

  api-gateway:
    build:
      context: ./api-gateway
    ports:
      - "8765:8765"
    depends_on:
      - account-service
      - security-service
      - settings-service

volumes:
  postgres_data:
  kafka_data:
  user-db-data:
  minio_data:


