plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'checkstyle'
    id 'jacoco'
}

group = 'ru.katacademy.bank_app'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

checkstyle {
    toolVersion = '10.12.3'
    configFile = file("$rootDir/config/checkstyle/checkstyle.xml")
}

repositories {
    mavenCentral()
    maven { url = 'https://repo.spring.io/milestone' }
    maven { url = 'https://repo.spring.io/snapshot' }
}

jacoco {
    toolVersion = "0.8.11"
}

test {
    finalizedBy jacocoTestReport
    useJUnitPlatform()
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required = true // Локальный HTML-отчёт
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, includes: [
                    "ru/katacademy/bank_app/settingsservice/domain/entity/*",
                    "ru/katacademy/bank_app/settingsservice/application/service/*",
            ])
        }))
    }
}

// Проверка минимального покрытия
jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, includes: [
                    "ru/katacademy/bank_app/settingsservice/domain/entity/*",
                    "ru/katacademy/bank_app/settingsservice/application/service/*",
            ])
        }))
    }
    violationRules {
        rule {
            element = 'CLASS' // или 'PACKAGE'
            limit {
                minimum = 0.80 // Требуемое покрытие (80%)
            }
            println "Проверяемые классы/пакеты:"
            classDirectories.each { dir ->
                println " - ${dir}"
            }
        }
    }
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'org.hibernate.validator:hibernate-validator:6.0.13.Final'
    implementation 'org.glassfish:javax.el:3.0.0'
    implementation 'org.postgresql:postgresql:42.7.2'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation(project(":bank-shared"))

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Database
    runtimeOnly 'org.postgresql:postgresql'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.h2database:h2'
}

bootJar {
    archiveFileName = 'app.jar'
}

tasks.named('test') {
    useJUnitPlatform()
}
