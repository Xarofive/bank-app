workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "dev"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG'
      when: always
    - when: never

stages:
  - guard
  - lint
  - test
  - deploy
  - release

variables:
  GRADLE_USER_HOME: "$CI_PROJECT_DIR/.gradle"
  GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx1024m"

cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - .gradle/wrapper
    - .gradle/caches
    - .gradle/daemon
    - .gradle/native
    - .gradle/notifications
    - build/

before_script:
  - chmod +x gradlew
  - mkdir -p build/reports/checkstyle build/reports/spotbugs build/test-results/test build/reports/tests/test

guard_monolith:
  stage: guard
  image: alpine:3.19
  before_script:
    - apk add --no-cache git grep findutils
  script: |
    set -euo pipefail
    echo "üîé Guard: checking forbidden monolith sources and imports"

    dirs="src/main/java/ru/katacademy/bank_app/account
          src/main/java/ru/katacademy/bank_app/notification
          src/main/java/ru/katacademy/bank_app/shared
          src/main/java/ru/katacademy/bank_app/transaction
          bank-app/src/main/java/ru/katacademy/bank_app/account
          bank-app/src/main/java/ru/katacademy/bank_app/notification
          bank-app/src/main/java/ru/katacademy/bank_app/shared
          bank-app/src/main/java/ru/katacademy/bank_app/transaction"

    fail=0
    for d in $dirs; do
      if [ -d "$d" ] && find "$d" -type f -name '*.java' | grep -q . ; then
        echo "‚ùå Forbidden Java sources found in: $d"
        find "$d" -type f -name '*.java' | head -n 10 || true
        fail=1
      fi
    done

    if git grep -nE "import\s+ru\.katacademy\.bank_app\.(account|notification|shared|transaction)\." -- \
         . ":(exclude)docs/**" ":(exclude)**/build/**" ":(exclude)**/out/**" ":(exclude)**/target/**" ; then
      echo "‚ùå Forbidden imports detected above."
      fail=1
    fi

    [ "$fail" -eq 0 ] && echo "‚úÖ Guard passed." || exit 1
  allow_failure: false

lint:
  stage: lint
  image: gradle:8.5-jdk21
  script:
    - ./gradlew -v || ./gradlew -v || ./gradlew -v
    - ./gradlew clean build --no-daemon --stacktrace
  artifacts:
    when: always
    paths:
      - build/reports/checkstyle/
      - build/reports/spotbugs/

test:
  stage: test
  image: gradle:8.5-jdk21
  script:
    - ./gradlew test --no-daemon --stacktrace
  artifacts:
    when: always
    paths:
      - build/test-results/test/
      - build/reports/tests/test/
    reports:
      junit: build/test-results/test/TEST-*.xml

deploy:
  stage: deploy
  script:
    - echo "Deploy step"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

version_bump:
  stage: deploy
  image: alpine:3.19
  needs: ["test"]
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push"'
      when: on_success
    - when: never
  before_script:
    - apk add --no-cache bash git sed grep coreutils
    - chmod +x ci/version-bump.sh
  script:
    - bash ci/version-bump.sh
  variables:
    BUMP: "auto"

release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: '$CI_COMMIT_TAG'
  script:
    - echo "Creating GitLab Release for $CI_COMMIT_TAG"
  release:
    tag_name: $CI_COMMIT_TAG
    name: "Release $CI_COMMIT_TAG"
    description: |
      Commit: $CI_COMMIT_SHORT_SHA
      Pipeline: $CI_PIPELINE_URL
